import re

# Leer el archivo actual
with open('streamlit_app.py', 'r') as f:
    content = f.read()

# Nueva funci√≥n de carga robusta
new_function = '''@st.cache_resource
def cargar_modelo_principal():
    """Carga el modelo MobileNetV2 real con m√©todos robustos"""
    try:
        import tensorflow as tf
        
        ruta_modelo = Path("modelos/deep_learning/mobilenetv2_finetuned.h5")
        if ruta_modelo.exists():
            st.info("üîÑ Cargando modelo MobileNetV2 real...")
            
            # Intentar diferentes m√©todos de carga
            try:
                # M√©todo 1: Carga est√°ndar
                modelo = tf.keras.models.load_model(ruta_modelo)
                st.success("‚úÖ Modelo MobileNetV2 cargado exitosamente")
                st.info(f"üìä Arquitectura: {len(modelo.layers)} capas")
                return modelo
                
            except Exception as e1:
                st.warning(f"‚ö†Ô∏è M√©todo 1 fall√≥: {str(e1)[:50]}...")
                try:
                    # M√©todo 2: Carga sin compilar
                    modelo = tf.keras.models.load_model(ruta_modelo, compile=False)
                    st.success("‚úÖ Modelo cargado sin compilar (funcional)")
                    st.info(f"üìä Arquitectura: {len(modelo.layers)} capas")
                    return modelo
                    
                except Exception as e2:
                    st.error(f"‚ùå M√©todo 2 fall√≥: {str(e2)[:100]}")
                    return None
        else:
            st.error("‚ùå Archivo del modelo no encontrado")
            return None
            
    except Exception as e:
        st.error(f"‚ùå Error general: {e}")
        return None'''

# Buscar y reemplazar la funci√≥n existente
pattern = r'def cargar_modelo_principal\(\):.*?return None'
content = re.sub(pattern, new_function, content, flags=re.DOTALL)

# Guardar el archivo actualizado
with open('streamlit_app.py', 'w') as f:
    f.write(content)

print("‚úÖ Funci√≥n de carga actualizada para usar modelo real")
